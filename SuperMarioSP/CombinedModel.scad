// Choose your custom words and write them in UPPERCASE.
// If you want only one line, you can leave the second word empty.
word1="SUPER";
word2="MARIO";

// Gap between the two words
gap_words_letters = 2;
// Gap between the brim of two words
gap_words_brim = 2;
// Space between the letters
spacing_letters = 0.0;
// Space between the brim of the letters
spacing_brim = 0.0;



module letters_main(word1, word2, gap_words_letters, spacing_letters) {
    // Choose your custom words and write them in UPPERCASE.
    // If you want only one line, you can leave the second word empty.


    // CONSTANTS
    // The following values are model constants and are not intended to be changed by the end user.
    //-----------------
    // [Fixed design parameters]
    // Scale for Word 1
    scale_word1 = 5;

    // Scale for Word 2
    scale_word2 = 5;
    // Height scale
    scale_height = 1;

    // Brim radius/offset
    brim_radius = 1.5;

    gap = gap_words_letters;
    // Small tolerance to help letters fit into the brim
    wiggle=0.1;
    //-----------------

    spacing = spacing_letters;
    // Wall thickness for hollow letters
    wall_thikness_letter = 2;

    //-----------------

    // Path data for letters and symbols
    glyph_A = [
    [449, 741], [765, 52], [463, 4], [439, 181], [196, 187], [141, -2], [-150, 50], [249, 721], [449, 741]
    ]/100;
    glyph_B = [
    [138, 747], [485, 706], [565, 578], [559, 441], [507, 363], [580, 321], [629, 178], [573, 45], [457, 4], [21, 1], [1, 704], [138, 747]
    ]/100;
    glyph_C = [
    [287, 744], [563, 726], [552, 461], [372, 545], [215, 472], [208, 302], [346, 208], [549, 314], [617, 35], [218, 0], [23, 171], [-35, 386], [55, 617], [287, 744]
    ]/100;
    glyph_D = [
    [368, 744], [578, 572], [621, 171], [414, 2], [0, 2], [0, 699], [368, 744]
    ]/100;
    glyph_E = [
    [54, 745], [544, 745], [503, 538], [262, 501], [259, 450], [472, 434], 
    [462, 275], [272, 258], [289, 204], [520, 202], [605, 3], [54, 3], 
    [0, 481], [54, 745]
    ]/100;
    glyph_F = [
    [49, 746], [553, 742], [525, 501], [250, 532], [246, 452], [479, 464], [441, 244], [246, 269], [288, 3], [22, 3], [1, 543], [49, 746]
    ]/100;
    glyph_G = [
    [627, 591], [456, 495], [387, 533], [285, 502], [224, 357], [288, 222], [472, 244], [476, 277], [334, 264], [352, 465], [648, 461], [648, 66], [151, 2], [0, 309], [55, 591], [267, 745], [527, 727], [627, 591]
    ]/100;
    glyph_H = [
    [0, 698], [252, 746], [264, 441], [411, 463], [420, 732], [626, 723], [666, 5], [434, 13], [432, 238], [292, 211], [297, 5], [80, 5],
    [0, 698]
    ]/100;
    glyph_I = [
    [5, 739], [199, 751], [349, 43], [31, 8], [5, 739]
    ]/100;
    glyph_J = [
    [0, 739], [219, 744], [658, 724], [658, 528], [459, 509],
    [533, 162], [430, 32], [235, 0], [18, 0], [25, 220],
    [263, 237], [236, 509], [0, 528], [0, 739]
    ]/100;
    glyph_K = [
    [14, 741], [223, 741], [218, 539], [375, 718], [518, 566],
    [337, 369], [605, 178], [440, 0], [216, 243], [257, -2],
    [0, -2], [14, 741]
    ]/100;
    glyph_L = [
    [278, 717], [249, 269], [556, 306], [584, 75], [28, 9],
    [0, 749], [278, 717]
    ]/100;
    glyph_M = [
    [0, 76], [357, 737], [568, 737], [638, 537], [762, 738],
    [949, 742], [1154, 23], [887, 1], [836, 183], [775, 359],
    [591, 195], [450, 382], [281, 23], [0, 76]
    ]/100;
    glyph_N = [
    [0, 13], [133, 742], [284, 742], [425, 510], [437, 742],
    [669, 706], [620, 4], [428, 16], [280, 242], [237, 3],
    [0, 13]
    ]/100;
    glyph_O = [
    [522, 733], [740, 462], [678, 105], [283, 2], [-32, 280],
    [15, 593], [250, 742], [522, 733]
    ]/100;
    glyph_P = [
    [442, 740], [618, 619], [632, 323], [454, 151], [233, 137], [233, -4], [0, -4], [37, 740], [442, 740]
    ]/100;
    glyph_Q =[
    [531, 731], [721, 478], [653, 216], [797, 84], [621, -2], [535, 61], [238, -3], [-21, 243], [26, 593], [260, 740], [531, 731]
    ]/100;
    glyph_R = [
    [415, 739], [600, 604], [617, 371], [513, 255], [698, 92], [481, -2], [254, 192], [288, -1], [58, -1], [0, 707], [415, 739]
    ]/100;
    glyph_S = [
    [725, 556], [596, 397], [445, 494], [407, 446], [677, 248], [546, 1], [225, 1], [1, 179], [98, 342], [291, 233],
    [320, 278], [37, 446], [305, 746], [546, 746], [725, 556]
    ]/100;
    glyph_T = [
    [0, 742], [739, 729], [739, 429], [489, 470], [558, -1], [200, -1], [254, 470], [0, 483], [0, 742]
    ]/100;
    glyph_U = [
    [-9, 739], [314, 739], [299, 234], [424, 324], [387, 685], [694, 685], [694, 199], [515, -3], [138, -3], [-9, 177], [-9, 739]
    ]/100;
    glyph_V = [
    [0, 745], [259, 731], [362, 284], [401, 334], [512, 731], [799, 745], [517, 3], [169, 29], [0, 745]
    ]/100;
    glyph_W = [
    [1028, 675], [709, 6], [523, 6], [454, 207], [352, 5], [182, 0], [0, 723], [238, 744], [283, 562], [337, 385], [502, 550], [627, 362], [778, 729], [1028, 675]
    ]/100;
    glyph_X = [
    [200, 739], [357, 579], [473, 750], [663, 568], [525, 405], [753, 226], [563, 7], [399, 221], [191, 12], [0, 201], [221, 400], [53, 588], [200, 739]
    ]/100;
    glyph_Y = [
    [71, 733], [236, 557], [391, 753], [610, 588], [371, 380], [548, 13], [156, 31], [156, 350], [-93, 588], [71, 733]
    ]/100;
    glyph_Z = [
    [617, 3], [0, 28], [0, 228], [248, 486], [0, 471], [44, 748], [625, 707], [614, 517], [386, 265], [625, 300], [617, 3]
    ]/100;
    glyph_0 = [
    [381, 732], [552, 531], [497, 90], [224, 1], [3, 223], [48, 606], [202, 742], [381, 732], [560, 732]
    ]/100;
    glyph_1 = [
    [527, 727], [468, 205], [679, 232], [713, 1], [0, 1], [20, 218], [258, 205], [258, 476], [133, 397], [0, 578], [269, 741], [527, 741]
    ]/100;
    glyph_2 = [
    [4, 605], [211, 742], [392, 741], [544, 629], [610, 352], [411, 221], [629, 239], [686, 1], [110, 9], [34, 156], [330, 390], [309, 454], [261, 492], [140, 409], [4, 605]
    ]/100;
    glyph_3 = [
    [1, 607], [178, 740], [403, 708], [511, 522], [441, 421], [528, 357], [534, 131], [415, 1], [148, 26], [1, 175], [120, 291], [220, 197], [314, 222], [317, 279], [170, 329], [176, 419], [295, 498], [264, 531], [97, 454], [1, 607]
    ]/100;
    glyph_4 = [
    [531, 409], [689, 402], [689, 223], [548, 214], [575, 31], [318, 4], [314, 214], [8, 214], [4, 400], [208, 747], [487, 728], [531, 409]
    ]/100;
    glyph_5 = [
    [572, 741], [530, 543], [247, 546], [253, 501], [415, 495], [610, 389], [609, 166], [534, 45], [189, 10], [7, 95], [88, 248], [212, 205], [324, 200], [368, 251], [318, 298], [91, 293], [10, 433], [0, 724], [572, 741]
    ]/100;
    glyph_6 = [
    [154, 719], [335, 746], [515, 709], [447, 499], [286, 559], [211, 500], [202, 444], [416, 438], [501, 300], [499, 120], [380, 1], [136, 1], [0, 120], [0, 371], [28, 575], [154, 719]
    ]/100;
    glyph_7 = [
    [0, 740], [641, 726], [524, -3], [234, 66], [393, 501], [51, 473], [0, 740]
    ]/100;
    glyph_8 = [
    [461, 716], [533, 519], [446, 450], [562, 355], [577, 61], [414, -3], [154, -3], [0, 87], [17, 351], [139, 444], [46, 519], [116, 745], [461, 716]
    ]/100;
    glyph_9 = [
    [306, 747], [533, 593], [524, 320], [447, 127], [116, 1], [0, 161], [264, 230], [319, 327], [137, 313], [0, 463], [36, 677], [306, 747]
    ]/100;
    glyph_at = [
    [422, 103], [606, 184], [657, 125], [441, 2], [160, 63], [3, 349], [116, 715], [381, 854], [786, 684], [869, 344], [800, 248], [744, 167], [636, 182], [594, 233], [461, 169], [234, 206], [183, 482], [323, 672], [510, 664], [596, 607], [599, 637], [670, 600], [653, 418], [677, 260], [722, 243], [783, 364], [710, 615], [385, 748], [197, 637], [119, 371], [212, 165], [422, 103]
    ]/100;
    glyph_b_l = [
    [233, 856], [241, 782], [89, 795], [84, -15], [241, 15], [241, -83], [7, -98], [2, 866], [233, 856]
    ]/100;
    glyph_b_r = [
    [9, -88], [1, -14], [153, -27], [158, 783], [1, 753], [1, 851], [235, 866], [240, -98], [9, -88]
    ]/100;
    glyph_per = [
    [389, 745], [572, 774], [206, 33], [0, 4], [389, 745], [475, 293], [544, 213], [522, 35], [412, 0], [324, 88], [342, 242], [404, 297], [475, 293], [389, 745], [191, 768], [260, 687], [238, 510], [128, 474], [38, 564], [57, 717], [119, 771], [191, 768], [389, 745]
    ]/100;
    glyph_num = [
    [395, 778], [292, 29], [156, 0], [274, 749], [395, 778],

    [544, 749], [665, 778], [563, 29], [426, 0], [544, 749], 

    [718, 601], [810, 451], [113, 429], [4, 594], [718, 601],  

    [733, 328], [832, 169], [135, 147], [60, 316], [733, 328], [718, 601], [544, 749], [395, 778]
    ]/100;
    glyph_dol = [
    [664, 550], [546, 405], [431, 528], [289, 576], [254, 531], [664, 256], [500, 42], [206, 42], [1, 205], [90, 354], [259, 208], [444, 163], [471, 204], [34, 450], [279, 724], [500, 724], 
    [424, 794], [341, 795], [283, -32], [399, -20], [424, 794], [500, 724]
    ]/100;
    glyph_asc = [
    [278, 582], [164, 765], [68, 601], [8, 638], [164, 882], [348, 593], [278, 582]
    ]/100;
    glyph_bar = [
    [60, -121], [5, -121], [3, 853], [58, 853], [60, 974], [115, 974], [60, -121]
    ]/100;
    glyph_ast = [
    [67, 719], [97, 720], [93, 653], [144, 696], [158, 662], [99, 638], [161, 608], [141, 585], [93, 620], [99, 558], [49, 561], [55, 620], [22, 617], [28, 676], [78, 640], [28, 699], [95, 673], [95, 730], [45, 694], [23, 722], [90, 748], [38, 784], [67, 719]
    ]/100;
    glyph_col = [
    [92, 179], [164, 144], [172, 49], [114, 8], [50, 20], [20, 52], [10, 136], [92, 179], [97, 320], [170, 386], [167, 456], [84, 503], [16, 463], [22, 362], [97, 320]
    ]/100;
    //glyph_scol = [
    //[72, 456], [139, 496], [220, 450], [223, 381], [154, 317], [81, 358], [89, 95], [164, 91], [142, -17], [61, -92], [11, -92], [80, 5]
    //]/100;
    glyph_dot = [
    [107, 173], [186, 173], [233, 91], [200, 30], [107, 9], [64, 82], [107, 173]
    ]/100;
    glyph_sl = [
    [375, 727], [551, 755], [198, 41], [0, 13], [375, 727]
    ]/100;
    glyph_add = [
    [222, 524], [220, 424], [323, 434], [336, 320], [220, 325], [233, 221], [125, 213], [116, 325], [15, 328], [-2, 423], [119, 423], [108, 529], [222, 524]
    ]/100;
    glyph_com = [
    [58, 81], [138, 76], [114, -39], [28, -119], [-25, -119], [48, -15], [58, 81]
    ]/100;
    glyph_dif = [
    [6, 342], [1, 431], [325, 471], [341, 354], [6, 342]
    ]/100;
    glyph_equ = [
    [5, 299], [0, 353], [305, 377], [320, 307], [5, 299], [5, 435], [0, 488], [305, 512], [320, 442], [5, 435]
    ]/100;
    glyph_que = [
    [242, 144], [298, 68], [263, 3], [174, 0], [138, 54], [162, 140], [242, 144],
    [256, 465], [284, 573], [226, 609], [138, 528], [0, 671], [131, 779], [308, 779], [437, 623], [432, 424], [293, 330], [308, 190], [126, 190], [105, 345], [256, 465], [242, 144]
    ]/100;
    glyph_exc = [
    [213, 219], [93, 210], [0, 768], [197, 796], [213, 219],[71, 78], [106, 144], [197, 148], [233, 92], [209, 4], [128, 1], [71, 78]
    ]/100;
    glyph_les = [
    [37, 785], [91, 776], [91, 665], [38, 593], [-3, 609], [38, 691], [205, 776], [205, 665], [152, 593], [99, 609], [140, 691], [139, 785],
    [205, 776], [205, 665], [152, 593], [99, 609], [140, 691], [139, 785]
    ]/100;
    glyph_pr = [
    [0, 785], [71, 785], [175, 658], [251, 402], [240, 130], [200, 2], [80, -100], [33, -80], [120, 41], [150, 268], [119, 498], [0, 785]
    ]/100;
    glyph_pl = [
    [250, 780], [132, 622], [67, 392], [92, 166], [218, -62], [130, -62], [80, 40], [20, 194], [0, 465], [76, 721], [120, 800], [220, 860], [354, 890], [354, 800]
    ]/100;
    glyph_uns = [
    [0, -28], [0, 27], [728, 27], [728, -28], [0, -28]
    ]/100;
    glyph_qus = [
    [37, 785], [91, 776], [91, 665], [38, 593], [-3, 609], [38, 691], [37, 785]
    ]/100;
    // Path data for the holes in the letters and symbols
    hole_A = [
    [300, 479], [259, 377], [412, 373], [377, 476], [323, 479]
    ]/100;
    hole_B = [
    [257, 152], [359, 174], [359, 242], [257, 277], [257, 152], [244, 462], [345, 483], [345, 565], [244, 587], [244, 462]
    ]/100;
    hole_D = [
    [229, 477], [229, 259], [364, 306], [364, 415], [229, 477]
    ]/100;
    hole_O = [
    [309, 481], [258, 367], [346, 308], [439, 342], [434, 453], [309, 481]
    ]/100;
    hole_P = [
    [274, 512], [267, 391], [333, 382], [417, 481], [274, 512]
    ]/100;
    hole_Q = [
    [228, 477], [221, 272], [385, 223], [294, 313], [426, 409], [505, 336], [532, 388], [432, 523], [228, 477]
    ]/100;
    hole_R = [
    [254, 532], [248, 390], [309, 382], [370, 470], [254, 532]
    ]/100;
    hole_0 = [
    [257, 488], [235, 324], [279, 287], [327, 321], [318, 462], [257, 462]

    ]/100;
    hole_4 = [
    [216, 409], [305, 409], [297, 513], [216, 409]
    ]/100;
    hole_6 = [
    [258, 267], [211, 244], [213, 185], [292, 185], [308, 249], [258, 267]
    ]/100;
    hole_8 = [
    [364, 259], [306, 283], [248, 259], [248, 211], [306, 187], [364, 211], [364, 259], [332, 587], [288, 605], [244, 587], [244, 551], [288, 533], [332, 551], [332, 587]
    ]/100;
    hole_9 = [
    [225, 480], [312, 480], [321, 527], [281, 560], [225, 527], [225, 480]
    ]/100;
    hole_at = [
    [381, 514], [336, 445], [365, 351], [451, 351], [508, 418], [479, 504], [381, 514]
    ]/100;
    hole_per = [
    [426, 195], [417, 129], [435, 114], [454, 128], [451, 185], [426, 195],
    [141, 670], [132, 604], [149, 589], [169, 603], [165, 659], [141, 670]
    ]/100;
    // Width of the letters
    width|*/, 161/***/, 172+79/*:*/, 220/*;*/, 270/*.*/, 551/*/*/, 336/*+*/, 160/*,*/, 330/*-*/, 310/*=*/, 430/*?*/, 230/*!*/, 882/*<*/, 251/*)*/, 354/*(*/, 728/*_*/, 90/*'*/]/100;
    width_A = width[0];
    width_B = width[1];
    width_C = width[2];
    width_D = width[3];
    width_E = width[4];
    width_F = width[5];
    width_G = width[6];
    width_H = width[7];
    width_I = width[8];
    width_J = width[9];
    width_K = width[10];
    width_L = width[11];
    width_M = width[12];
    width_N = width[13];
    width_O = width[14];
    width_P = width[15];
    width_Q = width[16];
    width_R = width[17];
    width_S = width[18];
    width_T = width[19];
    width_U = width[20];
    width_V = width[21];
    width_W = width[22];
    width_X = width[23];
    width_Y = width[24];
    width_Z = width[25];
    width_0 = width[26];
    width_1 = width[27];
    width_2 = width[28];
    width_3 = width[29];
    width_4 = width[30];
    width_5 = width[31];
    width_6 = width[32];
    width_7 = width[33];
    width_8 = width[34];
    width_9 = width[35];
    width_at = width[36];
    width_b_l = width[37];
    width_b_r = width[38];
    width_per = width[39];
    width_num = width[40];
    width_dol = width[41];
    width_asc = width[42];
    width_bar = width[43];
    width_ast = width[44];
    width_col = width[45];
    width_scol = width[46];
    width_dot = width[47];
    width_sl = width[48];
    width_add = width[49];
    width_com = width[50];
    width_dif = width[51];
    width_equ = width[52];
    width_que = width[53];
    width_exc = width[54];
    width_les = width[55];
    width_pr = width[56];
    width_pl = width[57];
    width_uns = width[58];
    width_qus = width[59];
    // Function that returns the path data for any supported letter or symbol
    function glyph_sorter_all(letter) =
    letter == "A" ? (glyph_A) :
    letter == "B" ? (glyph_B) :
    letter == "C" ? (glyph_C) :
    letter == "D" ? (glyph_D) :
    letter == "E" ? (glyph_E) :
    letter == "F" ? (glyph_F) :
    letter == "G" ? (glyph_G) :
    letter == "H" ? (glyph_H) :
    letter == "I" ? (glyph_I) :
    letter == "J" ? (glyph_J) :
    letter == "K" ? (glyph_K) :
    letter == "L" ? (glyph_L) :
    letter == "M" ? (glyph_M) :
    letter == "N" ? (glyph_N) :
    letter == "O" ? (glyph_O) :
    letter == "P" ? (glyph_P) :
    letter == "Q" ? (glyph_Q) :
    letter == "R" ? (glyph_R) :
    letter == "S" ? (glyph_S) :
    letter == "T" ? (glyph_T) :
    letter == "U" ? (glyph_U) :
    letter == "V" ? (glyph_V) :
    letter == "W" ? (glyph_W) :
    letter == "X" ? (glyph_X) :
    letter == "Y" ? (glyph_Y) :
    letter == "Z" ? (glyph_Z) :
    letter == "0" ? (glyph_0) :
    letter == "1" ? (glyph_1) :
    letter == "2" ? (glyph_2) :
    letter == "3" ? (glyph_3) :
    letter == "4" ? (glyph_4) :
    letter == "5" ? (glyph_5) :
    letter == "6" ? (glyph_6) :
    letter == "7" ? (glyph_7) :
    letter == "8" ? (glyph_8) :
    letter == "9" ? (glyph_9) :
    letter == "@" ? (glyph_at) :
    letter == "[" ? (glyph_b_l) :
    letter == "]" ? (glyph_b_r) :
    letter == "%" ? (glyph_per) :
    letter == "#" ? (glyph_num) :
    letter == "$" ? (glyph_dol) :
    letter == "^" ? (glyph_asc) :
    letter == "|" ? (glyph_bar) :
    letter == "*" ? (glyph_ast) :
    letter == ":" ? (glyph_col) :
    letter == ";" ? (glyph_scol) :
    letter == "." ? (glyph_dot) :
    letter == "/" ? (glyph_sl) :
    letter == "+" ? (glyph_add) :
    letter == "," ? (glyph_com) :
    letter == "-" ? (glyph_dif) :
    letter == "=" ? (glyph_equ) :
    letter == "?" ? (glyph_que) :
    letter == "!" ? (glyph_exc) :
    letter == "<" ? (glyph_les) :
    letter == ")" ? (glyph_pr) :
    letter == "(" ? (glyph_pl) :
    letter == "_" ? (glyph_uns) :
    letter == "'" ? (glyph_qus) :
    0; // Default value for unsupported letters

    // Function that returns the path data for a subset of letters/symbols (used for solid letters)
    function glyph_sorter(letter) =
    letter == "C" ? (glyph_C) :
    letter == "E" ? (glyph_E) :
    letter == "F" ? (glyph_F) :
    letter == "G" ? (glyph_G) :
    letter == "H" ? (glyph_H) :
    letter == "I" ? (glyph_I) :
    letter == "J" ? (glyph_J) :
    letter == "K" ? (glyph_K) :
    letter == "L" ? (glyph_L) :
    letter == "M" ? (glyph_M) :
    letter == "N" ? (glyph_N) :
    letter == "S" ? (glyph_S) :
    letter == "T" ? (glyph_T) :
    letter == "U" ? (glyph_U) :
    letter == "V" ? (glyph_V) :
    letter == "W" ? (glyph_W) :
    letter == "X" ? (glyph_X) :
    letter == "Y" ? (glyph_Y) :
    letter == "Z" ? (glyph_Z) :
    letter == "1" ? (glyph_1) :
    letter == "2" ? (glyph_2) :
    letter == "3" ? (glyph_3) :
    letter == "5" ? (glyph_5) :
    letter == "7" ? (glyph_7) :
    letter == "[" ? (glyph_b_l) :
    letter == "]" ? (glyph_b_r) :
    letter == "#" ? (glyph_num) :
    letter == "$" ? (glyph_dol) :
    letter == "^" ? (glyph_asc) :
    letter == "|" ? (glyph_bar) :
    letter == "*" ? (glyph_ast) :
    letter == ":" ? (glyph_col) :
    letter == ";" ? (glyph_scol) :
    letter == "." ? (glyph_dot) :
    letter == "/" ? (glyph_sl) :
    letter == "+" ? (glyph_add) :
    letter == "," ? (glyph_com) :
    letter == "-" ? (glyph_dif) :
    letter == "=" ? (glyph_equ) :
    letter == "?" ? (glyph_que) :
    letter == "!" ? (glyph_exc) :
    letter == "<" ? (glyph_les) :
    letter == ")" ? (glyph_pr) :
    letter == "(" ? (glyph_pl) :
    letter == "_" ? (glyph_uns) :
    letter == "'" ? (glyph_qus) :
    0; // Default value for unsupported letters

    // Function that returns the path data for letters with holes (used for hollow or outlined letters
    function glyph_sorter_hole(letter) =
    letter == "A" ? (glyph_A) :
    letter == "B" ? (glyph_B) :
    letter == "D" ? (glyph_D) :
    letter == "O" ? (glyph_O) :
    letter == "P" ? (glyph_P) :
    letter == "Q" ? (glyph_Q) :
    letter == "R" ? (glyph_R) :
    letter == "0" ? (glyph_0) :
    letter == "4" ? (glyph_4) :
    letter == "6" ? (glyph_6) :
    letter == "8" ? (glyph_8) :
    letter == "9" ? (glyph_9) :
    letter == "@" ? (glyph_at) :
    letter == "%" ? (glyph_per) :
    0; // Default value for unsupported letters

    // Function that returns the path data for the hole inside a letter (if present)
    function hole_sorter(letter) =
    letter == "A" ? (hole_A) :
    letter == "B" ? (hole_B) :
    letter == "D" ? (hole_D) :
    letter == "O" ? (hole_O) :
    letter == "P" ? (hole_P) :
    letter == "Q" ? (hole_Q) :
    letter == "R" ? (hole_R) :
    letter == "0" ? (hole_0) :
    letter == "4" ? (hole_4) :
    letter == "6" ? (hole_6) :
    letter == "8" ? (hole_8) :
    letter == "9" ? (hole_9) :
    letter == "@" ? (hole_at) :
    letter == "%" ? (hole_per) :
    0;  // Default value for unsupported letters

    // Function that returns the width of a letter or symbol, used for spacing
    function width_letter(letter) =
    letter == "A" ? (width_A) :
    letter == "B" ? (width_B) :
    letter == "C" ? (width_C) :
    letter == "D" ? (width_D) :
    letter == "E" ? (width_E) :
    letter == "F" ? (width_F) :
    letter == "G" ? (width_G) :
    letter == "H" ? (width_H) :
    letter == "I" ? (width_I) :
    letter == "J" ? (width_J) :
    letter == "K" ? (width_K) :
    letter == "L" ? (width_L) :
    letter == "M" ? (width_M) :
    letter == "N" ? (width_N) :
    letter == "O" ? (width_O) :
    letter == "P" ? (width_P) :
    letter == "Q" ? (width_Q) :
    letter == "R" ? (width_R) :
    letter == "S" ? (width_S) :
    letter == "T" ? (width_T) :
    letter == "U" ? (width_U) :
    letter == "V" ? (width_V) :
    letter == "W" ? (width_W) :
    letter == "X" ? (width_X) :
    letter == "Y" ? (width_Y) :
    letter == "Z" ? (width_Z) :
    letter == "0" ? (width_0) :
    letter == "1" ? (width_1) :
    letter == "2" ? (width_2) :
    letter == "3" ? (width_3) :
    letter == "4" ? (width_4) :
    letter == "5" ? (width_5) :
    letter == "6" ? (width_6) :
    letter == "7" ? (width_7) :
    letter == "8" ? (width_8) :
    letter == "9" ? (width_9) :
    letter == "@" ? (width_at) :
    letter == "[" ? (width_b_l) :
    letter == "]" ? (width_b_r) :
    letter == "%" ? (width_per) :
    letter == "#" ? (width_num) :
    letter == "$" ? (width_dol) :
    letter == "^" ? (width_asc) :
    letter == "|" ? (width_bar) :
    letter == "*" ? (width_ast) :
    letter == ":" ? (width_col) :
    letter == ";" ? (width_scol) :
    letter == "." ? (width_dot) :
    letter == "/" ? (width_sl) :
    letter == "+" ? (width_add) :
    letter == "," ? (width_com) :
    letter == "-" ? (width_dif) :
    letter == "=" ? (width_equ) :
    letter == "?" ? (width_que) :
    letter == "!" ? (width_exc) :
    letter == "<" ? (width_les) :
    letter == ")" ? (glyph_pr) :
    letter == "(" ? (glyph_pl) :
    letter == "_" ? (glyph_uns) :
    letter == "'" ? (glyph_qus) :
    0; // Default value for unsupported letters

    // Module that draws a glyph as a 2D polygon and extrudes it to the given height
    module draw_glyph(paths, height=1)
    {
    linear_extrude(height)
    polygon(paths); 


    }

    // Module that draws a glyph with a negative offset for hollow letters
    module draw_glyph_smaller(paths, height=1)
    {
    linear_extrude(height) offset(-wall_thikness_letter)
    polygon(paths);
    }
    // These Moduls are used to draw the brim around the letters, interlocking
    // Module that draws the brim (outline) of a glyph with brim_radius
    module draw_glyph_brim(paths, height=1)
    {
        linear_extrude(height) offset(brim_radius) polygon(paths); // Dickerer Umriss am unteren Ende
    }
    // Module that draws a larger brim for hollow letters
    module draw_glyph_brim_bigger(paths, height=1)
    {
        linear_extrude(height) offset(brim_radius + wall_thikness_letter) polygon(paths); // Dickerer Umriss am unteren Ende
    }

    // Module that renders both words, positioning them correctly
    module call_words(brim, k)
    {   // Render the second word, centered horizontally
    translate([-total_width(word2, scale_word2) / 2, 0, 0])
    {
        render_word(word2, scale_height, scale_word2, k, brim);
    }
    // Render the first word, centered horizontally and shifted vertically
    translate([-total_width(word1, scale_word1) / 2, 7.44 * scale_word2 + gap, 0])
    {
        render_word(word1, scale_height, scale_word1, k, brim);
    }
    }

    // Module is necessary to renderer the letters to interlock them
    // Module that renders a single letter with all options (brim, hollow, holes, etc.)
    module render_letter(letter, height, i, pre_letter, scale, k, brim)
    {
        // If the letter has a hole (A, B, D, O, P, Q, R, 0, 4, 6, 8, 9, @, %), draw the brim and the hole

        if(letter == "A"||"B"||"D"||"O"||"P"||"Q"||"R"||"0"||"4"||"6"||"8"||"9"||"@"||"%")
    {
        draw_glyph_brim(glyph_sorter_hole(letter)*scale, brim);
        difference()
        {
            draw_glyph(glyph_sorter_hole(letter)*scale, height);
            translate([0, 0, -1]) draw_glyph(hole_sorter(letter)*scale, height + 2);// Loch
            translate([-width_letter(pre_letter)*scale, 0, 0])draw_glyph_brim(glyph_sorter_all(pre_letter)*scale, height+2);
        }
    }
    // Draw the brim and the letter for all other cases

    draw_glyph_brim(glyph_sorter(letter)*scale,brim);
    difference()
    {
        draw_glyph(glyph_sorter(letter)*scale, height);
        translate([-width_letter(pre_letter)*scale-spacing, 0, 0])draw_glyph_brim(glyph_sorter_all(pre_letter)*scale, height+2);
    }

    }



    // Module that renders a word, letter by letter, with correct spacing
    module render_word(word, height=1, scale, k, brim)
    { 
    // Loop through each letter in the word and render it with the correct spacing

    for (i = [0 : len(word) - 1])
    {
        translate([spacing_letter(i, str(word[i]), word, scale), 0, 0])
        {
            render_letter(str(word[i]), height, i, i == 0 ? "" : str(word[i-1]), scale, k, brim);
        }
    }
    }

    // Function that calculates the X offset for each letter in a word

    function spacing_letter(i, letter, word, scale)
    = i == 0 ? 0 : spacing_letter(i-1, str(word[i-1]), word, scale) + width_letter(str(word[i-1])) * scale + spacing;

    // Function that calculates the total width of a word
    function total_width(word, scale) = spacing_letter(len(word)-1, str(word[len(word)-1]), word, scale) + width_letter(str(word[len(word)-1])) * scale;

    // Call the words with the specified parameters
    call_words(0, false);
}

// Begin SuperMarioBrim.scad content
module brim_main(word1, word2, gap_words_brim, spacing_brim) {
    // Choose your custom words and write them in UPPERCASE.
    // If you want only one line, you can leave the second word empty.


    // The following values are model constants and are not intended to be changed by the end user.
    //-----------------
    // [Fixed design parameters]

    // Scale factor for the first word (word1)
    scale_word1 = 5;

    // Scale factor for the second word (word2)
    scale_word2 = 5;

    // Height of the extruded letters
    scale_height = 5.0;

    // Height of the brim (the base outline under the letters)
    brim_height = 10;

    // Radius/offset for the brim outline
    brim_radius = 1.5;

    // Vertical gap between the two words
    gap = gap_words_brim;

    // Horizontal spacing between letters
    spacing =  spacing_brim;

    // Thickness of the base of the brim
    bottom_thickness = 10.00001;

    // Small tolerance to help letters fit into the brim
    wiggle = 0.1;




    //-----------------

    // Path data for each letter and symbol, used to draw the glyphs
    // Each glyph is a list of 2D points (x, y), divided by 100 for scaling
    glyph_A = [
        [449, 741], [765, 52], [463, 4], [439, 181], [196, 187], [141, -2], [-150, 50], [249, 721], [449, 741]
    ]/100;
    glyph_B = [
        [138, 747], [485, 706], [565, 578], [559, 441], [507, 363], [580, 321], [629, 178], [573, 45], [457, 4], [21, 1], [1, 704], [138, 747]
    ]/100;
    glyph_C = [
        [287, 744], [563, 726], [552, 461], [372, 545], [215, 472], [208, 302], [346, 208], [549, 314], [617, 35], [218, 0], [23, 171], [-35, 386], [55, 617], [287, 744]
    ]/100;
    glyph_D = [
        [368, 744], [578, 572], [621, 171], [414, 2], [0, 2], [0, 699], [368, 744]
    ]/100;
    glyph_E = [
        [54, 745], [544, 745], [503, 538], [262, 501], [259, 450], [472, 434], 
        [462, 275], [272, 258], [289, 204], [520, 202], [605, 3], [54, 3], 
        [0, 481], [54, 745]
    ]/100;
    glyph_F = [
        [49, 746], [553, 742], [525, 501], [250, 532], [246, 452], [479, 464], [441, 244], [246, 269], [288, 3], [22, 3], [1, 543], [49, 746]
    ]/100;
    glyph_G = [
        [627, 591], [456, 495], [387, 533], [285, 502], [224, 357], [288, 222], [472, 244], [476, 277], [334, 264], [352, 465], [648, 461], [648, 66], [151, 2], [0, 309], [55, 591], [267, 745], [527, 727], [627, 591]
    ]/100;
    glyph_H = [
        [0, 698], [252, 746], [264, 441], [411, 463], [420, 732], [626, 723], [666, 5], [434, 13], [432, 238], [292, 211], [297, 5], [80, 5],
        [0, 698]
    ]/100;
    glyph_I = [
        [5, 739], [199, 751], [349, 43], [31, 8], [5, 739]
    ]/100;
    glyph_J = [
        [0, 739], [219, 744], [658, 724], [658, 528], [459, 509],
        [533, 162], [430, 32], [235, 0], [18, 0], [25, 220],
        [263, 237], [236, 509], [0, 528], [0, 739]
    ]/100;
    glyph_K = [
        [14, 741], [223, 741], [218, 539], [375, 718], [518, 566],
        [337, 369], [605, 178], [440, 0], [216, 243], [257, -2],
        [0, -2], [14, 741]
    ]/100;
    glyph_L = [
        [278, 717], [249, 269], [556, 306], [584, 75], [28, 9],
        [0, 749], [278, 717]
    ]/100;
    glyph_M = [
        [0, 76], [357, 737], [568, 737], [638, 537], [762, 738],
        [949, 742], [1154, 23], [887, 1], [836, 183], [775, 359],
        [591, 195], [450, 382], [281, 23], [0, 76]
    ]/100;
    glyph_N = [
        [0, 13], [133, 742], [284, 742], [425, 510], [437, 742],
        [669, 706], [620, 4], [428, 16], [280, 242], [237, 3],
        [0, 13]
    ]/100;
    glyph_O = [
        [522, 733], [740, 462], [678, 105], [283, 2], [-32, 280],
        [15, 593], [250, 742], [522, 733]
    ]/100;
    glyph_P = [
        [442, 740], [618, 619], [632, 323], [454, 151], [233, 137], [233, -4], [0, -4], [37, 740], [442, 740]
    ]/100;
    glyph_Q =[
        [531, 731], [721, 478], [653, 216], [797, 84], [621, -2], [535, 61], [238, -3], [-21, 243], [26, 593], [260, 740], [531, 731]
    ]/100;
    glyph_R = [
        [415, 739], [600, 604], [617, 371], [513, 255], [698, 92], [481, -2], [254, 192], [288, -1], [58, -1], [0, 707], [415, 739]
    ]/100;
    glyph_S = [
        [725, 556], [596, 397], [445, 494], [407, 446], [677, 248], [546, 1], [225, 1], [1, 179], [98, 342], [291, 233],
        [320, 278], [37, 446], [305, 746], [546, 746], [725, 556]
    ]/100;
    glyph_T = [
        [0, 742], [739, 729], [739, 429], [489, 470], [558, -1], [200, -1], [254, 470], [0, 483], [0, 742]
    ]/100;
    glyph_U = [
        [-9, 739], [314, 739], [299, 234], [424, 324], [387, 685], [694, 685], [694, 199], [515, -3], [138, -3], [-9, 177], [-9, 739]
    ]/100;
    glyph_V = [
        [0, 745], [259, 731], [362, 284], [401, 334], [512, 731], [799, 745], [517, 3], [169, 29], [0, 745]
    ]/100;
    glyph_W = [
        [1028, 675], [709, 6], [523, 6], [454, 207], [352, 5], [182, 0], [0, 723], [238, 744], [283, 562], [337, 385], [502, 550], [627, 362], [778, 729], [1028, 675]
    ]/100;
    glyph_X = [
        [200, 739], [357, 579], [473, 750], [663, 568], [525, 405], [753, 226], [563, 7], [399, 221], [191, 12], [0, 201], [221, 400], [53, 588], [200, 739]
    ]/100;
    glyph_Y = [
        [71, 733], [236, 557], [391, 753], [610, 588], [371, 380], [548, 13], [156, 31], [156, 350], [-93, 588], [71, 733]
    ]/100;
    glyph_Z = [
        [617, 3], [0, 28], [0, 228], [248, 486], [0, 471], [44, 748], [625, 707], [614, 517], [386, 265], [625, 300], [617, 3]
    ]/100;
    glyph_0 = [
        [381, 732], [552, 531], [497, 90], [224, 1], [3, 223], [48, 606], [202, 742], [381, 732], [560, 732]
    ]/100;
    glyph_1 = [
        [527, 727], [468, 205], [679, 232], [713, 1], [0, 1], [20, 218], [258, 205], [258, 476], [133, 397], [0, 578], [269, 741], [527, 741]
    ]/100;
    glyph_2 = [
        [4, 605], [211, 742], [392, 741], [544, 629], [610, 352], [411, 221], [629, 239], [686, 1], [110, 9], [34, 156], [330, 390], [309, 454], [261, 492], [140, 409], [4, 605]
    ]/100;
    glyph_3 = [
        [1, 607], [178, 740], [403, 708], [511, 522], [441, 421], [528, 357], [534, 131], [415, 1], [148, 26], [1, 175], [120, 291], [220, 197], [314, 222], [317, 279], [170, 329], [176, 419], [295, 498], [264, 531], [97, 454], [1, 607]
    ]/100;
    glyph_4 = [
        [531, 409], [689, 402], [689, 223], [548, 214], [575, 31], [318, 4], [314, 214], [8, 214], [4, 400], [208, 747], [487, 728], [531, 409]
    ]/100;
    glyph_5 = [
        [572, 741], [530, 543], [247, 546], [253, 501], [415, 495], [610, 389], [609, 166], [534, 45], [189, 10], [7, 95], [88, 248], [212, 205], [324, 200], [368, 251], [318, 298], [91, 293], [10, 433], [0, 724], [572, 741]
    ]/100;
    glyph_6 = [
        [154, 719], [335, 746], [515, 709], [447, 499], [286, 559], [211, 500], [202, 444], [416, 438], [501, 300], [499, 120], [380, 1], [136, 1], [0, 120], [0, 371], [28, 575], [154, 719]
    ]/100;
    glyph_7 = [
        [0, 740], [641, 726], [524, -3], [234, 66], [393, 501], [51, 473], [0, 740]
    ]/100;
    glyph_8 = [
        [461, 716], [533, 519], [446, 450], [562, 355], [577, 61], [414, -3], [154, -3], [0, 87], [17, 351], [139, 444], [46, 519], [116, 745], [461, 716]
    ]/100;
    glyph_9 = [
        [306, 747], [533, 593], [524, 320], [447, 127], [116, 1], [0, 161], [264, 230], [319, 327], [137, 313], [0, 463], [36, 677], [306, 747]
    ]/100;
    glyph_at = [
        [422, 103], [606, 184], [657, 125], [441, 2], [160, 63], [3, 349], [116, 715], [381, 854], [786, 684], [869, 344], [800, 248], [744, 167], [636, 182], [594, 233], [461, 169], [234, 206], [183, 482], [323, 672], [510, 664], [596, 607], [599, 637], [670, 600], [653, 418], [677, 260], [722, 243], [783, 364], [710, 615], [385, 748], [197, 637], [119, 371], [212, 165], [422, 103]
    ]/100;
    glyph_b_l = [
        [233, 856], [241, 782], [89, 795], [84, -15], [241, 15], [241, -83], [7, -98], [2, 866], [233, 856]
    ]/100;
    glyph_b_r = [
        [9, -88], [1, -14], [153, -27], [158, 783], [1, 753], [1, 851], [235, 866], [240, -98], [9, -88]
    ]/100;
    glyph_per = [
        [389, 745], [572, 774], [206, 33], [0, 4], [389, 745], [475, 293], [544, 213], [522, 35], [412, 0], [324, 88], [342, 242], [404, 297], [475, 293], [389, 745], [191, 768], [260, 687], [238, 510], [128, 474], [38, 564], [57, 717], [119, 771], [191, 768], [389, 745]
    ]/100;
    glyph_num = [
        [395, 778], [292, 29], [156, 0], [274, 749], [395, 778],
        
        [544, 749], [665, 778], [563, 29], [426, 0], [544, 749], 
        
       [718, 601], [810, 451], [113, 429], [4, 594], [718, 601],  
        
        [733, 328], [832, 169], [135, 147], [60, 316], [733, 328], [718, 601], [544, 749], [395, 778]
    ]/100;
    glyph_dol = [
        [664, 550], [546, 405], [431, 528], [289, 576], [254, 531], [664, 256], [500, 42], [206, 42], [1, 205], [90, 354], [259, 208], [444, 163], [471, 204], [34, 450], [279, 724], [500, 724], 
        [424, 794], [341, 795], [283, -32], [399, -20], [424, 794], [500, 724]
    ]/100;
    glyph_asc = [
        [278, 582], [164, 765], [68, 601], [8, 638], [164, 882], [348, 593], [278, 582]
    ]/100;
    glyph_bar = [
        [60, -121], [5, -121], [3, 853], [58, 853], [60, 974], [115, 974], [60, -121]
    ]/100;
    glyph_ast = [
        [67, 719], [97, 720], [93, 653], [144, 696], [158, 662], [99, 638], [161, 608], [141, 585], [93, 620], [99, 558], [49, 561], [55, 620], [22, 617], [28, 676], [78, 640], [28, 699], [95, 673], [95, 730], [45, 694], [23, 722], [90, 748], [38, 784], [67, 719]
    ]/100;
    glyph_col = [
        [92, 179], [164, 144], [172, 49], [114, 8], [50, 20], [20, 52], [10, 136], [92, 179], [97, 320], [170, 386], [167, 456], [84, 503], [16, 463], [22, 362], [97, 320]
    ]/100;
    //glyph_scol = [
        //[72, 456], [139, 496], [220, 450], [223, 381], [154, 317], [81, 358], [89, 95], [164, 91], [142, -17], [61, -92], [11, -92], [80, 5]
    //]/100;
    glyph_dot = [
        [107, 173], [186, 173], [233, 91], [200, 30], [107, 9], [64, 82], [107, 173]
    ]/100;
    glyph_sl = [
        [375, 727], [551, 755], [198, 41], [0, 13], [375, 727]
    ]/100;
    glyph_add = [
        [222, 524], [220, 424], [323, 434], [336, 320], [220, 325], [233, 221], [125, 213], [116, 325], [15, 328], [-2, 423], [119, 423], [108, 529], [222, 524]
    ]/100;
    glyph_com = [
        [58, 81], [138, 76], [114, -39], [28, -119], [-25, -119], [48, -15], [58, 81]
    ]/100;
    glyph_dif = [
        [6, 342], [1, 431], [325, 471], [341, 354], [6, 342]
    ]/100;
    glyph_equ = [
        [5, 299], [0, 353], [305, 377], [320, 307], [5, 299], [5, 435], [0, 488], [305, 512], [320, 442], [5, 435]
    ]/100;
    glyph_que = [
        [242, 144], [298, 68], [263, 3], [174, 0], [138, 54], [162, 140], [242, 144],
        [256, 465], [284, 573], [226, 609], [138, 528], [0, 671], [131, 779], [308, 779], [437, 623], [432, 424], [293, 330], [308, 190], [126, 190], [105, 345], [256, 465], [242, 144]
    ]/100;
    glyph_exc = [
        [213, 219], [93, 210], [0, 768], [197, 796], [213, 219],[71, 78], [106, 144], [197, 148], [233, 92], [209, 4], [128, 1], [71, 78]
    ]/100;
    glyph_les = [
        [37, 785], [91, 776], [91, 665], [38, 593], [-3, 609], [38, 691], [205, 776], [205, 665], [152, 593], [99, 609], [140, 691], [139, 785],
        [205, 776], [205, 665], [152, 593], [99, 609], [140, 691], [139, 785]
    ]/100;
    glyph_pr = [
        [0, 785], [71, 785], [175, 658], [251, 402], [240, 130], [200, 2], [80, -100], [33, -80], [120, 41], [150, 268], [119, 498], [0, 785]
    ]/100;
    glyph_pl = [
        [250, 780], [132, 622], [67, 392], [92, 166], [218, -62], [130, -62], [80, 40], [20, 194], [0, 465], [76, 721], [120, 800], [220, 860], [354, 890], [354, 800]
    ]/100;
    glyph_uns = [
        [0, -28], [0, 27], [728, 27], [728, -28], [0, -28]
    ]/100;
    glyph_qus = [
        [37, 785], [91, 776], [91, 665], [38, 593], [-3, 609], [38, 691], [37, 785]
    ]/100;

    // Path data for the holes in the letters and symbols
    hole_A = [
        [300, 479], [259, 377], [412, 373], [377, 476], [323, 479]
    ]/100;
    hole_B = [
        [257, 152], [359, 174], [359, 242], [257, 277], [257, 152], [244, 462], [345, 483], [345, 565], [244, 587], [244, 462]
    ]/100;
    hole_D = [
        [229, 477], [229, 259], [364, 306], [364, 415], [229, 477]
    ]/100;
    hole_O = [
        [309, 481], [258, 367], [346, 308], [439, 342], [434, 453], [309, 481]
    ]/100;
    hole_P = [
        [274, 512], [267, 391], [333, 382], [417, 481], [274, 512]
    ]/100;
    hole_Q = [
        [228, 477], [221, 272], [385, 223], [294, 313], [426, 409], [505, 336], [532, 388], [432, 523], [228, 477]
    ]/100;
    hole_R = [
        [254, 532], [248, 390], [309, 382], [370, 470], [254, 532]
    ]/100;
    hole_0 = [
        [257, 488], [235, 324], [279, 287], [327, 321], [318, 462], [257, 462]

    ]/100;
    hole_4 = [
        [216, 409], [305, 409], [297, 513], [216, 409]
    ]/100;
    hole_6 = [
        [258, 267], [211, 244], [213, 185], [292, 185], [308, 249], [258, 267]
    ]/100;
    hole_8 = [
        [364, 259], [306, 283], [248, 259], [248, 211], [306, 187], [364, 211], [364, 259], [332, 587], [288, 605], [244, 587], [244, 551], [288, 533], [332, 551], [332, 587]
    ]/100;
    hole_9 = [
        [225, 480], [312, 480], [321, 527], [281, 560], [225, 527], [225, 480]
    ]/100;
    hole_at = [
        [381, 514], [336, 445], [365, 351], [451, 351], [508, 418], [479, 504], [381, 514]
    ]/100;
    hole_per = [
        [426, 195], [417, 129], [435, 114], [454, 128], [451, 185], [426, 195],
        [141, 670], [132, 604], [149, 589], [169, 603], [165, 659], [141, 670]
    ]/100;
    // Width of the letters
    width|*/, 161/***/, 172+79/*:*/, 220/*;*/, 270/*.*/, 551/*/*/, 336/*+*/, 160/*,*/, 330/*-*/, 310/*=*/, 430/*?*/, 230/*!*/, 882/*<*/, 251/*)*/, 354/*(*/, 728/*_*/, 90/*'*/]/100;
    width_A = width[0];
    width_B = width[1];
    width_C = width[2];
    width_D = width[3];
    width_E = width[4];
    width_F = width[5];
    width_G = width[6];
    width_H = width[7];
    width_I = width[8];
    width_J = width[9];
    width_K = width[10];
    width_L = width[11];
    width_M = width[12];
    width_N = width[13];
    width_O = width[14];
    width_P = width[15];
    width_Q = width[16];
    width_R = width[17];
    width_S = width[18];
    width_T = width[19];
    width_U = width[20];
    width_V = width[21];
    width_W = width[22];
    width_X = width[23];
    width_Y = width[24];
    width_Z = width[25];
    width_0 = width[26];
    width_1 = width[27];
    width_2 = width[28];
    width_3 = width[29];
    width_4 = width[30];
    width_5 = width[31];
    width_6 = width[32];
    width_7 = width[33];
    width_8 = width[34];
    width_9 = width[35];
    width_at = width[36];
    width_b_l = width[37];
    width_b_r = width[38];
    width_per = width[39];
    width_num = width[40];
    width_dol = width[41];
    width_asc = width[42];
    width_bar = width[43];
    width_ast = width[44];
    width_col = width[45];
    width_scol = width[46];
    width_dot = width[47];
    width_sl = width[48];
    width_add = width[49];
    width_com = width[50];
    width_dif = width[51];
    width_equ = width[52];
    width_que = width[53];
    width_exc = width[54];
    width_les = width[55];
    width_pr = width[56];
    width_pl = width[57];
    width_uns = width[58];
    width_qus = width[59];
    // Function that returns the path data for any supported letter or symbol
    function glyph_sorter_all(letter) =
        letter == "A" ? (glyph_A) :
        letter == "B" ? (glyph_B) :
        letter == "C" ? (glyph_C) :
        letter == "D" ? (glyph_D) :
        letter == "E" ? (glyph_E) :
        letter == "F" ? (glyph_F) :
        letter == "G" ? (glyph_G) :
        letter == "H" ? (glyph_H) :
        letter == "I" ? (glyph_I) :
        letter == "J" ? (glyph_J) :
        letter == "K" ? (glyph_K) :
        letter == "L" ? (glyph_L) :
        letter == "M" ? (glyph_M) :
        letter == "N" ? (glyph_N) :
        letter == "O" ? (glyph_O) :
        letter == "P" ? (glyph_P) :
        letter == "Q" ? (glyph_Q) :
        letter == "R" ? (glyph_R) :
        letter == "S" ? (glyph_S) :
        letter == "T" ? (glyph_T) :
        letter == "U" ? (glyph_U) :
        letter == "V" ? (glyph_V) :
        letter == "W" ? (glyph_W) :
        letter == "X" ? (glyph_X) :
        letter == "Y" ? (glyph_Y) :
        letter == "Z" ? (glyph_Z) :
        letter == "0" ? (glyph_0) :
        letter == "1" ? (glyph_1) :
        letter == "2" ? (glyph_2) :
        letter == "3" ? (glyph_3) :
        letter == "4" ? (glyph_4) :
        letter == "5" ? (glyph_5) :
        letter == "6" ? (glyph_6) :
        letter == "7" ? (glyph_7) :
        letter == "8" ? (glyph_8) :
        letter == "9" ? (glyph_9) :
        letter == "@" ? (glyph_at) :
        letter == "[" ? (glyph_b_l) :
        letter == "]" ? (glyph_b_r) :
        letter == "%" ? (glyph_per) :
        letter == "#" ? (glyph_num) :
        letter == "$" ? (glyph_dol) :
        letter == "^" ? (glyph_asc) :
        letter == "|" ? (glyph_bar) :
        letter == "*" ? (glyph_ast) :
        letter == ":" ? (glyph_col) :
        letter == ";" ? (glyph_scol) :
        letter == "." ? (glyph_dot) :
        letter == "/" ? (glyph_sl) :
        letter == "+" ? (glyph_add) :
        letter == "," ? (glyph_com) :
        letter == "-" ? (glyph_dif) :
        letter == "=" ? (glyph_equ) :
        letter == "?" ? (glyph_que) :
        letter == "!" ? (glyph_exc) :
        letter == "<" ? (glyph_les) :
        letter == ")" ? (glyph_pr) :
        letter == "(" ? (glyph_pl) :
        letter == "_" ? (glyph_uns) :
        letter == "'" ? (glyph_qus) :
        0; // Default value for unsupported letters

    // Function that returns the path data for a subset of letters/symbols (used for solid letters)
    function glyph_sorter(letter) =
        letter == "C" ? (glyph_C) :
        letter == "E" ? (glyph_E) :
        letter == "F" ? (glyph_F) :
        letter == "G" ? (glyph_G) :
        letter == "H" ? (glyph_H) :
        letter == "I" ? (glyph_I) :
        letter == "J" ? (glyph_J) :
        letter == "K" ? (glyph_K) :
        letter == "L" ? (glyph_L) :
        letter == "M" ? (glyph_M) :
        letter == "N" ? (glyph_N) :
        letter == "S" ? (glyph_S) :
        letter == "T" ? (glyph_T) :
        letter == "U" ? (glyph_U) :
        letter == "V" ? (glyph_V) :
        letter == "W" ? (glyph_W) :
        letter == "X" ? (glyph_X) :
        letter == "Y" ? (glyph_Y) :
        letter == "Z" ? (glyph_Z) :
        letter == "1" ? (glyph_1) :
        letter == "2" ? (glyph_2) :
        letter == "3" ? (glyph_3) :
        letter == "5" ? (glyph_5) :
        letter == "7" ? (glyph_7) :
        letter == "[" ? (glyph_b_l) :
        letter == "]" ? (glyph_b_r) :
        letter == "#" ? (glyph_num) :
        letter == "$" ? (glyph_dol) :
        letter == "^" ? (glyph_asc) :
        letter == "|" ? (glyph_bar) :
        letter == "*" ? (glyph_ast) :
        letter == ":" ? (glyph_col) :
        letter == ";" ? (glyph_scol) :
        letter == "." ? (glyph_dot) :
        letter == "/" ? (glyph_sl) :
        letter == "+" ? (glyph_add) :
        letter == "," ? (glyph_com) :
        letter == "-" ? (glyph_dif) :
        letter == "=" ? (glyph_equ) :
        letter == "?" ? (glyph_que) :
        letter == "!" ? (glyph_exc) :
        letter == "<" ? (glyph_les) :
        letter == ")" ? (glyph_pr) :
        letter == "(" ? (glyph_pl) :
        letter == "_" ? (glyph_uns) :
        letter == "'" ? (glyph_qus) :
        0; // Default value for unsupported letters





    // Function that returns the width of a letter or symbol, used for spacing
    function width_letter(letter) =
        letter == "A" ? (width_A) :
        letter == "B" ? (width_B) :
        letter == "C" ? (width_C) :
        letter == "D" ? (width_D) :
        letter == "E" ? (width_E) :
        letter == "F" ? (width_F) :
        letter == "G" ? (width_G) :
        letter == "H" ? (width_H) :
        letter == "I" ? (width_I) :
        letter == "J" ? (width_J) :
        letter == "K" ? (width_K) :
        letter == "L" ? (width_L) :
        letter == "M" ? (width_M) :
        letter == "N" ? (width_N) :
        letter == "O" ? (width_O) :
        letter == "P" ? (width_P) :
        letter == "Q" ? (width_Q) :
        letter == "R" ? (width_R) :
        letter == "S" ? (width_S) :
        letter == "T" ? (width_T) :
        letter == "U" ? (width_U) :
        letter == "V" ? (width_V) :
        letter == "W" ? (width_W) :
        letter == "X" ? (width_X) :
        letter == "Y" ? (width_Y) :
        letter == "Z" ? (width_Z) :
        letter == "0" ? (width_0) :
        letter == "1" ? (width_1) :
        letter == "2" ? (width_2) :
        letter == "3" ? (width_3) :
        letter == "4" ? (width_4) :
        letter == "5" ? (width_5) :
        letter == "6" ? (width_6) :
        letter == "7" ? (width_7) :
        letter == "8" ? (width_8) :
        letter == "9" ? (width_9) :
        letter == "@" ? (width_at) :
        letter == "[" ? (width_b_l) :
        letter == "]" ? (width_b_r) :
        letter == "%" ? (width_per) :
        letter == "#" ? (width_num) :
        letter == "$" ? (width_dol) :
        letter == "^" ? (width_asc) :
        letter == "|" ? (width_bar) :
        letter == "*" ? (width_ast) :
        letter == ":" ? (width_col) :
        letter == ";" ? (width_scol) :
        letter == "." ? (width_dot) :
        letter == "/" ? (width_sl) :
        letter == "+" ? (width_add) :
        letter == "," ? (width_com) :
        letter == "-" ? (width_dif) :
        letter == "=" ? (width_equ) :
        letter == "?" ? (width_que) :
        letter == "!" ? (width_exc) :
        letter == "<" ? (width_les) :
        letter == ")" ? (glyph_pr) :
        letter == "(" ? (glyph_pl) :
        letter == "_" ? (glyph_uns) :
        letter == "'" ? (glyph_qus) :
        0; // Default value for unsupported letters

    // Module that draws a glyph with a small positive offset for tolerance
    module draw_glyph(paths, height=1)
    {
        linear_extrude(height) offset(wiggle)
        polygon(paths); 
    }


    // Module that draws the brim (outline) of a glyph with brim_radius
    module draw_glyph_brim(paths, height=1)
    {
        linear_extrude(height) offset(brim_radius) polygon(paths);
    }


    // Module that renders both words, positioning them correctly
    module call_words(brim, k)
    {
        // Render the second word, centered horizontally
        translate([-total_width(word2, scale_word2) / 2, 0, 0])
        {
            render_word(word2, scale_height, scale_word2, k, brim);
        }
        // Render the first word, centered horizontally and shifted vertically
        translate([-total_width(word1, scale_word1) / 2, 7.44 * scale_word2 + gap, 0])
        {
            render_word(word1, scale_height, scale_word1, k, brim);
        }
    }

    // Module that renders a single letter
    module render_letter(letter, height, i, pre_letter, scale, k, brim)
    {
        difference()
        {
            draw_glyph_brim(glyph_sorter_all(letter)*scale,brim);
            translate([0,0,bottom_thickness])
            {
                draw_glyph(glyph_sorter_all(letter)*scale, height);
                translate([-width_letter(pre_letter)*scale - spacing, 0, -1])draw_glyph_brim(glyph_sorter_all(pre_letter)*scale, height+2);
            };
        }

    }


    // Module that renders a word, letter by letter, with correct spacing
    module render_word(word, height=1, scale, k, brim)
    {
        for (i = [0 : len(word) - 1])
        {
            translate([spacing_letter(i, str(word[i]), word, scale), 0, 0])
            {
                render_letter(str(word[i]), height, i, i == 0 ? "" : str(word[i-1]), scale, k, brim);
            }
        }
    }

    // Function that calculates the X offset for each letter in a word
    function spacing_letter(i, letter, word, scale)
    = i == 0 ? 0 : spacing_letter(i-1, str(word[i-1]), word, scale) + width_letter(str(word[i-1])) * scale + spacing;

    // Function that calculates the total width of a word
    function total_width(word, scale) = spacing_letter(len(word)-1, str(word[len(word)-1]), word, scale) + width_letter(str(word[len(word)-1])) * scale;
    ;
    // Only outline
    call_words(brim_height, true);
}
// Set global resolution directly at top of file:
$fn = 100;

union() {
	translate(v = [-0.0010000000, 0, 10.0300000000]) {
		letters_main(word1, word2, gap_words_letters, spacing_letters);
	}
	translate(v = [0.0010000000, 0, 0]) {
		brim_main(word1, word2, gap_words_brim, spacing_brim);
	}
}